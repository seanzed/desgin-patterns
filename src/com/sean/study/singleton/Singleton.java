package com.sean.study.singleton;

/**
 * 单例模式
 * 定义： 保证一个类仅有一个实例， 并提供一个访问它的全局方法
 *
 * 备注： 通常我们可以让一个全局变量使得一个对象被访问，但它不能防止你实例化多个对象。 一个最好的办法是，
 * 让类自身负责保存他的唯一实例。 这个类可以保证没有其他实例被创建， 并且它可以提供一个访问该实例的方法。
 *
 * 比如说：线程池、缓存、对话框、注册表、日志对象、充当打印机、显卡等设备驱动程序的对象。
 * 事实上，这一类对象只能有一个实例，如果制造出多个实例就可能会导致一些问题的产生，
 * 比如：程序的行为异常、资源使用过量、或者不一致性的结果。
 *
 * 对于频繁使用的对象，可以省略创建对象所花费的时间，这对于那些重量级对象而言，是非常可观的一笔系统开销；
 * 由于 new 操作的次数减少，因而对系统内存的使用频率也会降低，这将减轻 GC 压力，缩短 GC 停顿时间。
 *
 * 通常单例模式在Java语言中，有两种构建方式：
 *
 * 1. 饿汉方式。指全局的单例实例在类装载时构建
 * 2. 懒汉方式。指全局的单例实例在第一次被使用时构建
 */
public class Singleton {

    // 在静态初始化时创建单例实例， 这段代码保证了线程安全
    public static Singleton SINGLETON_INSTANCE = new Singleton();

    /**
     * Singleton类只有一个构造方法并且是被private修饰的，所以用户无法通过new方法创建该对象实例
     */
    private Singleton() {}

    public static Singleton getInstance() {
        return SINGLETON_INSTANCE;
    }
}
